language: rust
env:
  global:
  - CRATE_NAME=nmap-analyze
    #  - RUSTFLAGS="-C link-dead-code"
matrix:
  fast_finish: true
  include:
  - env: TARGET=x86_64-unknown-linux-gnu DEPLOY_DEB=1 DEPLOY_GITHUB=1 DEPLOY_ARCH=amd64
    rust: 1.26.0
  - env: TARGET=x86_64-apple-darwin DEPLOY_GITHUB=1
    rust: 1.26.0
    os: osx
  - env: TARGET=x86_64-unknown-linux-gnu CODECOV=1 RUSTFLAGS="-C link-dead-code"
    rust: stable
  - env: TARGET=x86_64-apple-darwin
    rust: stable
    os: osx
  - env: TARGET=x86_64-unknown-linux-gnu
    rust: beta
  - env: TARGET=x86_64-apple-darwin
    rust: beta
    os: osx
  - env: TARGET=x86_64-unknown-linux-gnu
    rust: nightly
  - env: TARGET=x86_64-apple-darwin
    rust: nightly
    os: osx
  allow_failures:
  - rust: beta
  - rust: nightly
sudo: required
addons:
  apt:
    packages:
    - libcurl4-openssl-dev
    - libelf-dev
    - libdw-dev
    - cmake
    - gcc
    - binutils-dev
    - libiberty-dev
after_success: |
  echo "Running integration tests" && (cd tests; make) && echo "Integration tests finished"
  if [[ "$TRAVIS_OS_NAME" == "linux" && "$CODECOV" ]]; then
    wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
    tar xzf master.tar.gz &&
    cd kcov-master &&
    mkdir build &&
    cd build &&
    cmake .. &&
    make &&
    make install DESTDIR=../../kcov-build &&
    cd ../.. &&
    rm -rf kcov-master &&
    for file in target/debug/nmap_analyze-*[^\.d] target/debug/it_*[^\.d]; do mkdir -p "target/cov/$(basename $file)"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&
    bash <(curl -s https://codecov.io/bash) &&
    echo "Uploaded code coverage."
  fi
  if [[ "$TRAVIS_TAG" && ( "$DEPLOY_DEB" || "DEPLOY_GITHUB" ) ]]; then
    cargo build --release &&
    cp "target/release/$CRATE_NAME" "target/release/$CRATE_NAME-$TRAVIS_TAG-$TARGET" &&
    gzip "target/release/$CRATE_NAME-$TRAVIS_TAG-$TARGET" &&
    ls -l target/release/ &&
    echo "Built Release Binary."
  fi
  if [[ "$DEPLOY_DEB" && "$DEPLOY_ARCH" && "$TRAVIS_TAG" ]]; then
    cd distribution/deb/ &&
    SRC_DIR=../../ BIN_DIR=../../target/release ARCH=$DEPLOY_ARCH VERSION=$TRAVIS_TAG TAG=$TRAVIS_TAG DIST=trusty make package &&
    cd ../.. &&
    echo "Built Debian Package."
  fi
before_deploy: |
  echo "Running before each single deployment..."
  echo "Run before each single deployment."
deploy:
  - provider: releases
    api_key:
      secure: hadvNsv7qyrRD2KzvxlmRQE7v363ZpbdoIurf9JSfydTmwmSKsuUe+jsuv5OBTCUd/eoHBLnHdRcFNM7dXROH/Dhg4MBnNAJJP0+DEjTCUxLpV2xNkYJijaqt6rw8ZAWPGXBttz6+/2ug5xDSjtxIXYmE23F6gabkgNBbZF0X+s0EnoZXEEgWPtvNQ9Qdik/bNZbWs3OB7oYEopO+KGctelz7SHfYTFW6K9UYAaYvrsHZnYdHu2x3EcyLhOag2Af5loyi7ZvFvoeswCvkMhsGVh+IuDuD6FSnw4apG6vQaN3LFCMZqjLJ0WMAEPMeFA/OPl3ltoUP/GFvwvu3ft2j48tyP0t2TvYT0g+WgjuczkMmon18ZWBN1fh0OLvsm7XaCRYRIhDXuidyivT7mI2/W/QfG+HiOij4g303xqNepWbR/IxSb6CLTZbDSYec5SSOttspEom4fsnH4mYhYiu/FKdHwfiWiHdeyw8Lql5y2BLaE/IIneYdG2nN701AR+qlo5AJendHDSQrfhF02LQCO1Q2wIxfwO5H9MGYnKK6RWJCJH2X/dfv2xRCX6lC8tnrpK/knISvsbYVom7eATQ9cpFJn3poomnxisTVwSuHI9JgzhX8pdDe0DbeIdga9BnrFc1e21uZeweJgqO7T2LAlmY8kL0qbQhW5ynvICZzDw=
    file_glob: true
    file: "target/release/$CRATE_NAME-$TRAVIS_TAG-$TARGET.gz"
    skip_cleanup: true
    on:
      tags: true
      condition:
      - "$DEPLOY_GITHUB"
      - "$TRAVIS_TAG"
